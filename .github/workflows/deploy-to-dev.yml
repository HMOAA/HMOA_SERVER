name: JAVA CI with gradle & docker

# PR이 발생했을 경우 실행
on:
  push:
    branches:
      - HMOA-121/Ci/ci-cd

jobs:
  CI-CD:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Install JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build with gradle
        working-directory: ./hmoaserver
        run: chmod +x gradlew

      - name: Setup Gradle
        working-directory: ./hmoaserver
        run: ./gradlew bootjar -PactiveProfile=dev

      - name: Set Tag
        run: echo "DATETIME=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Docker build & push
        env:
          DOCKER_TAG: ${{ env.DATETIME }}
        working-directory: ./hmoaserver
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build --platform linux/amd64 -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_TAG }}:$DOCKER_TAG .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_TAG }}:$DOCKER_TAG

#       ec2에 깃허브 ip 연결
      - name: Get Github IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Add IP to EC2 Inbound
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Transfer File
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER_NAME: ${{ secrets.SERVER_USER_NAME }}
          SERVER_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }}
        working-directory: ./hmoaserver
        run: |
          echo "$SERVER_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          scp -o StrictHostKeyChecking=no -i private_key.pem ./docker-compose.yml $SERVER_USER_NAME@$SERVER_HOST:/home/$SERVER_USER_NAME/docker
          scp -o StrictHostKeyChecking=no -i private_key.pem ./deploy.sh $SERVER_USER_NAME@$SERVER_HOST:/home/$SERVER_USER_NAME/deploy
          rm private_key.pem

      - name: check docker pull
        env:
          DOCKER_TAG: ${{ env.DATETIME }}
        run: echo "sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGE_TAG }}:$DOCKER_TAG"
          
      - name: Deploy to server
        env:
          DOCKER_TAG: ${{ env.DATETIME }}
        uses: appleboy/ssh-action@master
        with:
          username: ${{ secrets.SERVER_USER_NAME }}
          host: ${{ secrets.SERVER_HOST }}
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGE_TAG }}:$DOCKER_TAG
            cd /home/${{ secrets.SERVER_USER_NAME }}/deploy
            sudo chmod +x deploy.sh
            ./deploy.sh
            
      - name: Remove Github Ip
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      
